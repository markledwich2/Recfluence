using System;
using System.Collections.Generic;
using System.Linq;
using Amazon.TranscribeService.Model;
using Humanizer;
using SysExtensions;
using SysExtensions.Collections;
using SysExtensions.Text;
using YtReader.Store;
using YtReader.Yt;

namespace YtReader.Transcribe {
  public record TransJob {
    public string       JobName   { get; init; }
    public string       AccountId { get; init; }
    public TransResults Results   { get; init; }
  }

  public record TransResults {
    public TransText[]        Transcripts   { get; init; }
    public TransSpeakerLabels SpeakerLabels { get; init; }
    public TransItem[]        Items         { get; set; }
  }

  public record TransText {
    public string Transcript { get; init; }
  }

  public record TransSpeakerLabels {
    public int                Speaker  { get; init; }
    public TransSegmentRoot[] Segments { get; init; }
  }

  public record TransSegmentRoot : TransSegment {
    public TransSegment[] Items { get; init; }
  }

  public record TransSegment : RTransPeriod {
    public string SpeakerLabel { get; init; }
  }

  public record RTransPeriod {
    public string StartTime { get; init; }
    public string EndTime   { get; init; }
  }

  public record TransItem : RTransPeriod {
    public TransAlt[] Alternatives { get; set; }
    public string     Type         { get; set; }
  }

  public record TransAlt {
    public string Confidence { get; set; }
    public string Content    { get; set; }
  }

  public static class AwsTranscribe {
    public static (TimeSpan Start, TimeSpan End) Period(this RTransPeriod p) => (ParseTs(p.StartTime), ParseTs(p.EndTime));

    static TimeSpan ParseTs(string p) => p.TryParseDouble().Do(TimeSpan.FromSeconds);

    static bool IsPunctuation(this TransItem item) => item.Type == "punctuation";
    static string Content(this TransItem item) => item.Alternatives.FirstOrDefault()?.Content;

    /// <summary>Converts the AWS caption into our format. Splits trnascript at sentence and speaker boundaries, or 1min</summary>
    public static VideoCaption AwsToVideoCaption(this TransJob res, TranscriptionJob job, string videoId, string channelId) {
      var speakerByStart = res.Results.SpeakerLabels?.Segments
        .SelectMany(s => s.Items.Select(i => (s.SpeakerLabel, i.StartTime)))
        .ToDictionary(s => s.StartTime, s => s.SpeakerLabel) ?? new ();
      (int i, TransItem startItem) group = (0, default);

      var captions = res.Results.Items.WithPrevious((prev, item) => {
        var (groupStart, _) = group.startItem?.Period() ?? default;
        var speaker = speakerByStart.TryGet(item.StartTime);
        var lastSpeaker = speakerByStart.TryGet(prev.StartTime);
        if (prev.Content() == "."
          || speaker.HasValue() && speaker != lastSpeaker
          || groupStart != default && item.Period().Start - groupStart > 1.Minutes())
          group = (group.i + 1, item);
        return (group, item, speaker);
      }).GroupBy(c => c.group).Select(g => {
        var (start, _) = g.First().item.Period();
        return new ClosedCaption(g.Join("", c => (c.item.IsPunctuation() ? "" : " ") + c.item.Alternatives.First().Content),
          start, g.Last().item.Period().End - start, g.First().speaker);
      }).ToArray();

      var caption = new VideoCaption {
        Updated = DateTime.UtcNow,
        VideoId = videoId,
        ChannelId = channelId,
        Info = new(url: null, new(job.LanguageCode, name: null), isAutoGenerated: true),
        Captions = captions
      };
      return caption;
    }
  }
}