{
  "type": "object",
  "required": [
    "users",
    "headless",
    "discord",
    "seqUrl",
    "store"
  ],
  "properties": {
    "users": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserCfg"
      },
      "description": "the YouTube viewing users in the experiment. Contains credentials and other information"
    },
    "headless": {
      "type": "boolean",
      "description": "When true, selenium will run without an interactive browser showing. Must be true when running in a container"
    },
    "discord": {
      "$ref": "#/definitions/DiscordCfg",
      "description": "configuration for the discord bot used to request user validation"
    },
    "seqUrl": {
      "type": "string",
      "examples": [
        "http://log.recfluence.net/",
        "http://localhost:5341/"
      ],
      "description": "url of your seq instance"
    },
    "store": {
      "$ref": "#/definitions/StoreCfg",
      "description": "storage configuration"
    },
    "feed_scans": {
      "type": "integer",
      "default": 20,
      "description": "number of times to collect the list of videos in the feed"
    },
    "init_seed_vids": {
      "type": "integer",
      "default": 50,
      "description": "the number of videos to watch when initializing"
    },
    "run_seed_vids": {
      "type": "integer",
      "default": 5,
      "description": "the number of videos to watch when performing a daily run"
    },
    "run_test_vids": {
      "type": "integer",
      "description": "the number recommendations to collect. Only define if you want to restrict for test purposes"
    },
    "branch_env": {
      "type": "string",
      "description": "a name to prefix/suffix names of environment objects to have clean branch environments"
    },
    "max_watch_secs": {
      "type": "integer",
      "default": 300,
      "description": "the maximum time to watch a seed video for"
    }
  },
  "description": "UserScrape configuration",
  "$schema": "http://json-schema.org/draft-06/schema#",
  "definitions": {
    "UserCfg": {
      "type": "object",
      "required": [
        "email",
        "password",
        "telephone_number",
        "ideology"
      ],
      "properties": {
        "email": {
          "type": "string",
          "description": "email of the user e.g. mra.userscrape@gmail.com"
        },
        "password": {
          "type": "string",
          "description": "password for the user "
        },
        "telephone_number": {
          "type": "string",
          "description": "telephone number to verify account "
        },
        "ideology": {
          "type": "string",
          "examples": [
            "Partisan Right",
            "White Identitarian",
            "Provocative Anti-SJW",
            "Anti-theist",
            "Religious Conservative",
            "Partisan Left",
            "MRA",
            "Anti-SJW",
            "Socialist",
            "Center/Left MSM",
            "Libertarian",
            "Conspiracy",
            "Social Justice"
          ],
          "description": "The users ideology, expected to be unique between users"
        },
        "notify_discord_user_id": {
          "type": "integer",
          "description": "the user id (e.g. 123465448467005488) in discord to notify"
        }
      },
      "description": "UserCfg(email: str, password: str, telephone_number: str, ideology: str, notify_discord_user_id: Union[int, NoneType])"
    },
    "DiscordCfg": {
      "type": "object",
      "required": [
        "bot_token",
        "channel_id"
      ],
      "properties": {
        "bot_token": {
          "type": "string",
          "description": "The auth token for the discord bot"
        },
        "channel_id": {
          "type": "integer",
          "description": "The channel to ask for user validation codes"
        }
      },
      "description": "DiscordCfg(bot_token: str, channel_id: int)"
    },
    "StoreCfg": {
      "type": "object",
      "required": [
        "cs"
      ],
      "properties": {
        "cs": {
          "type": "string",
          "examples": [
            "DefaultEndpointsProtocol=http;AccountName=devstoreaccount1;AccountKey=Eby8vdM02xNOcqFlqUwJPLlmEtlCDXJ1OUzFT50uSRZ6IFsuFq2UVErCz4I6tq/K1SZFPTOtr/KBHBeksoGMGw==;BlobEndpoint=http://127.0.0.1:10000/devstoreaccount1;"
          ],
          "description": "connection string to the azure blob storage account storing the input, and output from scraping."
        },
        "container": {
          "type": "string",
          "default": "userscrape",
          "description": "the name of the container to store data"
        },
        "root_path": {
          "type": "string",
          "default": "",
          "description": "the root folder path to store data (e.g. folder1/folder2"
        }
      },
      "description": "StoreCfg(cs: str, container: str = 'userscrape', root_path: str = '')"
    }
  }
}