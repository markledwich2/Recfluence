variables:
  acr: ytnetworks.azurecr.io
  image: ytnetworks
  env: prod

jobs:


- job: Docker
  pool:
    vmImage: ubuntu-latest

  steps:

  - task: CmdLine@2
    inputs:
      script: |
        echo GitVersion
        dotnet tool restore
        dotnet dotnet-gitversion /output buildserver /nofetch
      failOnStderr: true
      workingDirectory: ./App

  - task: Docker@1
    displayName: Login
    inputs:
      azureSubscriptionEndpoint: Mark Ledwich ARM
      azureContainerRegistry: $(acr)
      command: login

  - task: Docker@1
    displayName: Build YtCli
    inputs:
      command: Build an image
      imageName: $(acr)/$(image):$(GitVersion.NuGetVersion)

  - task: Docker@1
    displayName: Push YtCli
    inputs:
      command: Push an image
      imageName: $(acr)/$(image):$(GitVersion.NuGetVersion)

- job: App
  pool:
    vmImage: windows-latest

  steps:
  - script: dotnet publish -c Release  --output $(Build.ArtifactStagingDirectory)/YtFunctions /p:Version='$(GitVersion.NuGetVersion)'
    workingDirectory: ./App/YtFunctions
    displayName: Publish YtFunctions

  - task: PublishBuildArtifacts@1
    displayName: Pubish YtFunctions Artifact
    inputs:
        pathtoPublish: $(Build.ArtifactStagingDirectory)/YtFunctions
        artifactName: YtFunctions

- job: Site
  pool:
    vmImage: vs2017-win2016
    
  steps:

    - script: npm install
      displayName: npm install
      workingDirectory: ./Site
      
    - script: npm run build
      env:
        NODE_ENV: ${env}
      displayName: npm build
      workingDirectory: ./Site

    - task: CopyFiles@2
      displayName: Copy site
      inputs:
          SourceFolder: ./Site/public/
          TargetFolder: $(Build.ArtifactStagingDirectory)/public

    - task: PublishBuildArtifacts@1
      displayName: Pubish artifacts
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)/public
          artifactName: web