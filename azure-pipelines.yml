variables:
  acr: ytnetworks.azurecr.io
  image: ytnetworks
  branch: -${{ variables['Build.SourceBranchName'] }}
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    env: prod
  ${{ if ne( variables['Build.SourceBranchName'], 'master') }}:
    env: stage
    

stages:
- stage: App
  jobs:
  - job: Docker
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: |
          echo GitVersion
          dotnet tool restore
          dotnet dotnet-gitversion /output buildserver /nofetch
      failOnStderr: true
      workingDirectory: ./App

    - task: Docker@2
      displayName: YtCli Docker Build
      inputs:
        command: build
        containerRegistry: ytnetworks
        repository: $(image)
        tags: $(GitVersion.SemVer)
        arguments: --build-arg SEMVER=$(GitVersion.SemVer) --build-arg ASSEMBLY_SEMVER=$(GitVersion.AssemblySemVer)
        buildContext: ./App

    - task: Docker@2
      displayName: YtCli Docker Push
      inputs:
        command: push
        containerRegistry: ytnetworks
        repository: $(image)
        tags: $(GitVersion.SemVer)

  - job: App
    pool:
      vmImage: ubuntu-latest

    steps:

    - script: |
          echo GitVersion
          dotnet tool restore
          dotnet dotnet-gitversion /output buildserver /nofetch
      failOnStderr: true
      workingDirectory: ./App

    - script: dotnet publish -c Release  --output $(Build.ArtifactStagingDirectory)/YtFunctions /p:Version='$(GitVersion.AssemblySemVer)' /p:InformationalVersion='$(GitVersion.SemVer)'
      workingDirectory: ./App/YtFunctions
      displayName: Publish YtFunctions

    - task: PublishBuildArtifacts@1
      displayName: Pubish YtFunctions Artifact
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)/YtFunctions
          artifactName: YtFunctions

- stage: Site
  variables:
    npm_config_cache: $(Pipeline.Workspace)/.npm
  dependsOn: []
  jobs:
  - job: Site
    pool:
      vmImage: ubuntu-latest
      
    steps:
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | ./Site/package-lock.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: $(npm_config_cache)
      displayName: Cache npm

    - script: npm ci
      workingDirectory: ./Site      
      
    - script: BRANCH=$(branch)  npm run build --prefix-paths
      env:
        NODE_ENV: ${env}
      displayName: npm build
      workingDirectory: ./Site

    - task: CopyFiles@2
      displayName: Copy site
      inputs:
          SourceFolder: ./Site/public/
          TargetFolder: $(Build.ArtifactStagingDirectory)/public

    - task: PublishBuildArtifacts@1
      displayName: Pubish artifacts
      inputs:
          pathtoPublish: $(Build.ArtifactStagingDirectory)/public
          artifactName: web