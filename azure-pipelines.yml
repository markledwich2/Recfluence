trigger:
  branches:
    include:
      - master

pr:
  - master

variables:
  acr: ytnetworks.azurecr.io
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    env: prod
  ${{ if ne( variables['Build.SourceBranchName'], 'master') }}:
    env: stage

stages:
  - stage: RecfluenceContainer
    jobs:
      - job: RecfluenceContainer
        pool:
          vmImage: ubuntu-latest

        steps:
          - script: |
              echo GitVersion
              dotnet tool restore
              dotnet dotnet-gitversion /output buildserver /nofetch
            failOnStderr: true
            workingDirectory: ./App

          - task: Docker@2
            displayName: YtCli Docker Build
            inputs:
              command: build
              containerRegistry: ytnetworks
              repository: recfluence
              tags: |
                $(GitVersion.SemVer)
                latest
              arguments: --build-arg SEMVER=$(GitVersion.SemVer) --build-arg ASSEMBLY_SEMVER=$(GitVersion.AssemblySemVer)
              buildContext: ./App

          - task: Docker@2
            displayName: YtCli Docker Push
            inputs:
              command: push
              containerRegistry: ytnetworks
              repository: recfluence
              tags: |
                $(GitVersion.SemVer)
                latest

  - stage: Dataform
    dependsOn: []
    jobs:
      - job: DataformContainer
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: Docker@2
            displayName: Dataform Docker Build & Push
            inputs:
              command: buildAndPush
              containerRegistry: ytnetworks
              repository: dataform
              tags: latest
              buildContext: Dataform
              Dockerfile: Dataform/Dockerfile

  - stage: UserScrape
    dependsOn: []
    jobs:
      - job: UserScrapeContainer
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: Docker@2
            displayName: UserScrape Docker Build & Push
            inputs:
              command: buildAndPush
              containerRegistry: ytnetworks
              repository: userscrape
              tags: latest
              buildContext: UserScrape
              Dockerfile: UserScrape/Dockerfile

    - stage: DataScripts
    dependsOn: []
    jobs:
      - job: DataScriptsContainer
        pool:
          vmImage: ubuntu-latest

        steps:
          - task: Docker@2
            displayName: DataScripts Docker Build & Push
            inputs:
              command: buildAndPush
              containerRegistry: ytnetworks
              repository: datascripts
              tags: latest
              buildContext: DataScripts
              Dockerfile: DataScripts/Dockerfile

  - stage: YtFunction
    dependsOn: []
    jobs:
      - job: YtFunction
        pool:
          vmImage: ubuntu-latest

        steps:
          - script: |
              echo GitVersion
              dotnet tool restore
              dotnet dotnet-gitversion /output buildserver /nofetch
            failOnStderr: true
            workingDirectory: ./App

          - script: dotnet publish -c Release  --output $(Build.ArtifactStagingDirectory)/YtFunctions /p:Version='$(GitVersion.AssemblySemVer)' /p:InformationalVersion='$(GitVersion.SemVer)'
            workingDirectory: ./App/YtFunctions
            displayName: Publish YtFunctions

          - task: PublishBuildArtifacts@1
            displayName: Pubish YtFunctions Artifact
            inputs:
              pathtoPublish: $(Build.ArtifactStagingDirectory)/YtFunctions
              artifactName: YtFunctions
